// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/v2/commonpb/sorting.proto

package common

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sorting struct {
	SortField string `protobuf:"bytes,1,opt,name=sortField,proto3" json:"sortField,omitempty"`
	SortOrder string `protobuf:"bytes,2,opt,name=sortOrder,proto3" json:"sortOrder,omitempty"`
}

func (m *Sorting) Reset()         { *m = Sorting{} }
func (m *Sorting) String() string { return proto.CompactTextString(m) }
func (*Sorting) ProtoMessage()    {}
func (*Sorting) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8dde29d3676cd7e, []int{0}
}
func (m *Sorting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sorting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sorting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sorting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sorting.Merge(m, src)
}
func (m *Sorting) XXX_Size() int {
	return m.Size()
}
func (m *Sorting) XXX_DiscardUnknown() {
	xxx_messageInfo_Sorting.DiscardUnknown(m)
}

var xxx_messageInfo_Sorting proto.InternalMessageInfo

func (m *Sorting) GetSortField() string {
	if m != nil {
		return m.SortField
	}
	return ""
}

func (m *Sorting) GetSortOrder() string {
	if m != nil {
		return m.SortOrder
	}
	return ""
}

func init() {
	proto.RegisterType((*Sorting)(nil), "commonpbv2.Sorting")
	golang_proto.RegisterType((*Sorting)(nil), "commonpbv2.Sorting")
}

func init() { proto.RegisterFile("pb/v2/commonpb/sorting.proto", fileDescriptor_f8dde29d3676cd7e) }
func init() {
	golang_proto.RegisterFile("pb/v2/commonpb/sorting.proto", fileDescriptor_f8dde29d3676cd7e)
}

var fileDescriptor_f8dde29d3676cd7e = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x48, 0xd2, 0x2f,
	0x33, 0xd2, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x2b, 0x48, 0xd2, 0x2f, 0xce, 0x2f, 0x2a, 0xc9,
	0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0x89, 0x97, 0x19, 0x49, 0xe9,
	0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xa7, 0xe7, 0xeb,
	0x83, 0x95, 0x24, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xaa, 0x14, 0xcc, 0xc5,
	0x1e, 0x0c, 0x31, 0x4b, 0x48, 0x86, 0x8b, 0x13, 0x64, 0xac, 0x5b, 0x66, 0x6a, 0x4e, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x42, 0x00, 0x26, 0xeb, 0x5f, 0x94, 0x92, 0x5a, 0x24, 0xc1,
	0x84, 0x90, 0x05, 0x0b, 0x58, 0xf1, 0x5c, 0x58, 0x28, 0xcf, 0x30, 0x61, 0x91, 0x3c, 0xc3, 0x8c,
	0x45, 0xf2, 0x0c, 0x4e, 0xae, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x81, 0xc7, 0x72, 0x8c, 0x51, 0xc6, 0xe9, 0x99, 0x25, 0x39, 0x89, 0x49, 0x7a, 0xc5,
	0x99, 0x39, 0xd9, 0x45, 0xf9, 0x29, 0xa9, 0x20, 0xe7, 0xe9, 0x95, 0x94, 0xeb, 0xa7, 0xe7, 0xe7,
	0x24, 0xe6, 0xa5, 0xeb, 0xa7, 0xe7, 0x17, 0x64, 0xa4, 0x16, 0xe9, 0xa3, 0x7a, 0x32, 0x89, 0x0d,
	0xec, 0x44, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x11, 0x5b, 0x2f, 0xfd, 0x00, 0x00,
	0x00,
}

func (m *Sorting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sorting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sorting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortOrder) > 0 {
		i -= len(m.SortOrder)
		copy(dAtA[i:], m.SortOrder)
		i = encodeVarintSorting(dAtA, i, uint64(len(m.SortOrder)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SortField) > 0 {
		i -= len(m.SortField)
		copy(dAtA[i:], m.SortField)
		i = encodeVarintSorting(dAtA, i, uint64(len(m.SortField)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSorting(dAtA []byte, offset int, v uint64) int {
	offset -= sovSorting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sorting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SortField)
	if l > 0 {
		n += 1 + l + sovSorting(uint64(l))
	}
	l = len(m.SortOrder)
	if l > 0 {
		n += 1 + l + sovSorting(uint64(l))
	}
	return n
}

func sovSorting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSorting(x uint64) (n int) {
	return sovSorting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sorting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSorting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sorting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sorting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSorting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSorting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSorting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSorting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSorting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSorting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSorting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSorting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSorting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSorting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSorting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSorting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSorting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSorting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSorting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSorting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSorting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSorting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSorting = fmt.Errorf("proto: unexpected end of group")
)
